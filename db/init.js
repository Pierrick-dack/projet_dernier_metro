// db/init.js
const fs = require('fs');
const path = require('path');
const pool = require('./database');

async function initializeDatabase() {
    const client = await pool.connect();
    
    try {
        console.log('üîÑ Initialisation de la base de donn√©es...');

        // √âtape 1: V√©rifier si la base de donn√©es existe, sinon la cr√©er
        await ensureDatabaseExists();

        // √âtape 2: V√©rifier si les tables existent, sinon les cr√©er
        const tablesExist = await checkTablesExist(client);
        
        if (!tablesExist) {
            console.log('üì¶ Cr√©ation des tables...');
            await executeSchema(client);
            console.log('‚úÖ Tables cr√©√©es avec succ√®s');
        } else {
            console.log('‚úÖ Tables d√©j√† existantes');
        }

        // √âtape 3: Ins√©rer les donn√©es initiales
        await executeSeedData(client);
        
        console.log('üéâ Base de donn√©es initialis√©e avec succ√®s');
        
    } catch (error) {
        console.error('‚ùå Erreur lors de l initialisation de la base de donn√©es:', error.message);
        throw error;
    } finally {
        client.release();
    }
}

async function ensureDatabaseExists() {
    try {
        // V√©rifier si la base de donn√©es existe en essayant de se connecter
        await pool.query('SELECT 1');
        console.log('‚úÖ Base de donn√©es connect√©e');
        return true;
    } catch (error) {
        console.error('‚ùå La base de donn√©es n existe pas ou erreur de connexion:', error.message);
        throw error;
    }
}

async function checkTablesExist(client) {
    try {
        // V√©rifier l'existence des trois tables principales
        const result = await client.query(`
            SELECT 
                EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'stations') as stations_exists,
                EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'headways') as headways_exists,
                EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'last_metro') as last_metro_exists;
        `);
        
        const { stations_exists, headways_exists, last_metro_exists } = result.rows[0];
        const allTablesExist = stations_exists && headways_exists && last_metro_exists;
        
        if (!allTablesExist) {
            console.log('üìä √âtat des tables:');
            console.log(`   - stations: ${stations_exists ? '‚úÖ' : '‚ùå'}`);
            console.log(`   - headways: ${headways_exists ? '‚úÖ' : '‚ùå'}`);
            console.log(`   - last_metro: ${last_metro_exists ? '‚úÖ' : '‚ùå'}`);
        }
        
        return allTablesExist;
    } catch (error) {
        console.error('Erreur lors de la v√©rification des tables:', error.message);
        return false;
    }
}

async function executeSchema(client) {
    try {
        const schemaPath = path.join(__dirname, 'init', '001_schema.sql');
        
        if (!fs.existsSync(schemaPath)) {
            throw new Error('Fichier de sch√©ma non trouv√©: ' + schemaPath);
        }
        
        const schemaSQL = fs.readFileSync(schemaPath, 'utf8');
        
        // Ex√©cuter le sch√©ma table par table pour mieux g√©rer les erreurs
        const statements = schemaSQL.split(';').filter(stmt => stmt.trim());
        
        for (const statement of statements) {
            if (statement.trim()) {
                await client.query(statement);
            }
        }
        
    } catch (error) {
        console.error('‚ùå Erreur lors de l ex√©cution du sch√©ma:', error.message);
        throw error;
    }
}

async function executeSeedData(client) {
    try {
        const seedPath = path.join(__dirname, 'init', '002_seed.sql');
        
        if (!fs.existsSync(seedPath)) {
            console.log('‚ö†Ô∏è  Aucun fichier de donn√©es initiales trouv√©');
            return;
        }
        
        const seedSQL = fs.readFileSync(seedPath, 'utf8').trim();
        
        if (!seedSQL) {
            console.log('‚ö†Ô∏è  Fichier de donn√©es initiales vide');
            return;
        }
        
        // V√©rifier si le fichier seed contient des instructions SQL valides
        const statements = seedSQL.split(';').filter(stmt => stmt.trim());
        
        if (statements.length === 0) {
            console.log('‚ö†Ô∏è  Aucune instruction SQL valide dans le fichier de donn√©es initiales');
            return;
        }
        
        let insertedRecords = 0;
        
        for (const statement of statements) {
            if (statement.trim()) {
                const result = await client.query(statement);
                if (result.command === 'INSERT') {
                    insertedRecords += result.rowCount || 0;
                }
            }
        }
        
        console.log(`‚úÖ Donn√©es initiales ins√©r√©es: ${insertedRecords} enregistrements`);
        
    } catch (error) {
        // Si l'erreur est due √† des doublons (ON CONFLICT), ce n'est pas grave
        if (error.message.includes('duplicate key') || error.message.includes('already exists')) {
            console.log('‚ÑπÔ∏è  Certaines donn√©es existaient d√©j√† (g√©r√©es par ON CONFLICT)');
        } else {
            console.warn('‚ö†Ô∏è  Avertissement lors de l insertion des donn√©es initiales:', error.message);
        }
    }
}

async function checkDatabaseConnection() {
    try {
        const result = await pool.query('SELECT NOW()');
        console.log('‚úÖ Connexion √† PostgreSQL √©tablie');
        return true;
    } catch (error) {
        console.error('‚ùå Erreur de connexion √† PostgreSQL:', error.message);
        return false;
    }
}

// Fonction pour r√©initialiser compl√®tement la base (utile pour les tests)
async function resetDatabase() {
    const client = await pool.connect();
    try {
        console.log('üîÑ R√©initialisation de la base de donn√©es...');
        
        // D√©sactiver les contraintes de cl√© √©trang√®re temporairement
        await client.query('SET session_replication_role = replica;');
        
        // Supprimer toutes les tables
        await client.query(`
            DROP TABLE IF EXISTS last_metro CASCADE;
            DROP TABLE IF EXISTS headways CASCADE;
            DROP TABLE IF EXISTS stations CASCADE;
        `);
        
        // R√©activer les contraintes
        await client.query('SET session_replication_role = DEFAULT;');
        
        console.log('‚úÖ Base de donn√©es r√©initialis√©e');
    } catch (error) {
        console.error('‚ùå Erreur lors de la r√©initialisation:', error.message);
        throw error;
    } finally {
        client.release();
    }
}

module.exports = { 
    initializeDatabase, 
    checkDatabaseConnection,
    resetDatabase
};