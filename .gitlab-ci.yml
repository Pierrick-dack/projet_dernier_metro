# .gitlab-ci.yml - AVEC SCANS S√âCURIT√â S10
stages:
  - test
  - security
  - build
  - security-image

# Test unitaires
test:
  stage: test
  image: node:18-alpine
  before_script:
    - cd api
    - npm install
  script:
    - npm test
  only:
    - main
    - merge_requests

# Scan des d√©pendances npm
security:npm-audit:
  stage: security
  image: node:18-alpine
  before_script:
    - cd api
  script:
    - echo "üîç Scanning npm dependencies..."
    - npm audit --audit-level=moderate --json > npm-audit-report.json || true
    - echo "üìä NPM Audit Results:"
    - npm audit --audit-level=moderate
  artifacts:
    when: always
    reports:
      sast: npm-audit-report.json
    paths:
      - api/npm-audit-report.json
    expire_in: 1 week
  allow_failure: true
  only:
    - main
    - merge_requests

# Build Docker
build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "api/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}:latest"
      --destination "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}"
      --cache=true
  only:
    - main

# Scan de l'image Docker
security:trivy:
  stage: security-image
  image:
    name: aquasec/trivy:latest
  before_script:
    - trivy --version
    - echo "üîç Scanning Docker image: ${CI_REGISTRY_IMAGE}:latest"
  script:
    - trivy image --severity HIGH,CRITICAL --format sarif --output trivy-report.sarif ${CI_REGISTRY_IMAGE}:latest
    - echo "üìä Trivy Scan Results:"
    - trivy image --severity HIGH,CRITICAL ${CI_REGISTRY_IMAGE}:latest
  artifacts:
    when: always
    reports:
      container_scanning: trivy-report.sarif
    paths:
      - trivy-report.sarif
    expire_in: 1 week
  allow_failure: true
  only:
    - main
    - merge_requests
  dependencies:
    - build